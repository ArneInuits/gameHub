/*
 *  ## TO DO 
 *  ## How are games defined in the GUI? just by a path? see fillGames and makeImage and selectedGame attribute.
 *  ## Also, how are selectedGame defined? include "game" or just the path? 
 * 
 */

package TestPackage;

import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import java.net.URL;
import java.io.*;
import java.util.Scanner;


public class Gamehub {
	
	private JFrame frame;
	private JPanel centerPanel;
	private JPanel rightPanel;
	private GridBagConstraints constraints;
	
//	private JTextArea text;
	private Color backgroundColor = Color.getColor("#a0a0a0");
	private String selectedGame = "";
	
	public Gamehub() {
        makeFrame();
        makecenterPanel();
        makeRightPanel();
        makeConstraints();
        fillHeader();
        fillGames();
        //frame.pack();
	}	
	
	private void makeFrame() {
		// container which can hold all the components
		frame = new JFrame("Gamehub menu");    		
        // stops when user exits program
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);        
        // Maximized size on extended 
        frame.setExtendedState(JFrame.MAXIMIZED_BOTH);  
        // No top bar
        //frame.setUndecorated(true);
        //frame.setResizable(false);
        //Display the window
        //frame.pack();
        
        frame.setVisible(true);
	}
	
	private void makeRightPanel() {
		rightPanel = new JPanel();
		rightPanel.setVisible(false);
		frame.add(rightPanel, BorderLayout.LINE_END);
	}
	
	private void makecenterPanel() {
		centerPanel = new JPanel(new GridBagLayout());
		//centerPanel.setPreferredSize(new Dimension(1000,800));
		centerPanel.setBackground(Color.gray);
		frame.add(centerPanel, BorderLayout.CENTER);
	}
	
	private void makeConstraints() {
		constraints = new GridBagConstraints();
	}
	
	
	private void fillHeader() {
		

		constraints.fill = GridBagConstraints.NONE;
		
		JLabel title = makeTitle();
		// anchor left top
		constraints.anchor = GridBagConstraints.FIRST_LINE_START;
		constraints.gridx = 0;
		constraints.gridy = 0;
		constraints.weightx = 1;
		constraints.weighty = 1;
		centerPanel.add(title, constraints);
		

		JButton colorPicker = makeColorPicker();
		// anchor top
		constraints.anchor = GridBagConstraints.PAGE_START;
		constraints.gridx = 2;
		constraints.gridy = 0;
		constraints.weightx = 1;
		constraints.weighty = 1;
		centerPanel.add(colorPicker, constraints);	
	}
	
	private JLabel makeTitle() {
		URL url = getClass().getResource("/res/menupic.png");
		ImageIcon image = new ImageIcon(url);
		JLabel label = new JLabel("gamehub", image, JLabel.LEADING);
		return label;	    
	}
	
	private JButton makeColorPicker() {
		JButton button = new JButton("Pick a new background color");

		// Make an action listener that will open a JColorChooser when an action is completed
	    ActionListener listener = new ActionListener() {
	    	public void actionPerformed(ActionEvent e) {
	    		centerPanel.setBackground(JColorChooser.showDialog(null, "Change the background", backgroundColor));
	    	}
	    };
	    // Link previous action listener to the button we created
	    button.addActionListener(listener);
	    return button;
	}
	
	//TEMP 
	private void makeHideButton() {
		JButton b = new JButton("Toggle the right panel");
		
		ActionListener listener = new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				rightPanel.setVisible(!rightPanel.isVisible());
			}
		};
		
	    constraints.gridx = 2;
	    constraints.gridy = 0;
	    constraints.weightx = 0.3;
		constraints.ipadx = 0;
		constraints.ipady = 0;
	    
		b.addActionListener(listener);
		centerPanel.add(b, constraints);
	}

	
	private void fillGames() {
		
		
		constraints.fill = GridBagConstraints.BOTH;
		constraints.anchor = GridBagConstraints.CENTER;
		constraints.insets = new Insets(20,20,20,20);

		
		JLabel pic1 = makeImage("/res/Game1");
		
		constraints.gridx = 0;
		constraints.gridy = 1;
		constraints.weightx = 1;
		constraints.weighty = 1;
		
		centerPanel.add(pic1, constraints);	
		
		JLabel pic2 = makeImage("/res/Game2");

		constraints.gridx = 1;
		constraints.gridy = 1;
		constraints.weightx = 1;
		constraints.weighty = 1;


		centerPanel.add(pic2, constraints);	
		
		JLabel pic3 = makeImage("/res/Game3");
		constraints.gridx = 2;
		constraints.gridy = 1;
		constraints.weightx = 1;
		constraints.weighty = 1;
		centerPanel.add(pic3, constraints);	

		JLabel pic4 = makeImage("/res/Game4");
		constraints.gridx = 0;
		constraints.gridy = 2;
		constraints.weightx = 1;
		constraints.weighty = 1;
		centerPanel.add(pic4, constraints);	
		
		JLabel pic5 = makeImage("/res/Game5");
		constraints.gridx = 1;
		constraints.gridy = 2;
		constraints.weightx = 1;
		constraints.weighty = 1;
		centerPanel.add(pic5, constraints);	

		JLabel pic6 = makeImage("/res/Game6");
		constraints.gridx = 2;
		constraints.gridy = 2;
		constraints.weightx = 1;
		constraints.weighty = 1;
		centerPanel.add(pic6, constraints);	

		JLabel pic7 = makeImage("/res/Game7");
		constraints.gridx = 0;
		constraints.gridy = 3;
		constraints.weightx = 1;
		constraints.weighty = 1;
		centerPanel.add(pic7, constraints);	
		
		JLabel pic8 = makeImage("/res/Game8");
		constraints.gridx = 1;
		constraints.gridy = 3;
		constraints.weightx = 1;
		constraints.weighty = 1;
		centerPanel.add(pic8, constraints);	
		
		JLabel pic9 = makeImage("/res/Game9" );
		constraints.gridx = 2;
		constraints.gridy = 3;
		constraints.weightx = 1;
		constraints.weighty = 1;
		centerPanel.add(pic9, constraints);	
	
	}

		
	private JLabel makeImage(String gamepath) {
		URL picurl = getClass().getResource(gamepath+"/pic.png");
		ImageIcon image = new ImageIcon(picurl);
		//ImageIcon scaledImage = new ImageIcon(image.getImage().getScaledInstance(width, height, Image.SCALE_DEFAULT));
		JLabel imagelabel = new JLabel(image);
		
		// clickable image makes right column with text, settings and start button
		MouseAdapter listener = new MouseAdapter() {
			public void mousePressed(MouseEvent e) {
				// make right panel
				fillRightPanel(gamepath);
				
								
			}
		};
		imagelabel.addMouseListener(listener);
		
		// TEMP
		imagelabel.setBackground(Color.RED);
		imagelabel.setOpaque(true);
		// TEMP
		
		return imagelabel;		
	}
	
	private String readTextFile(String path) throws IOException {
		File f = new File(path);		
		StringBuilder text = new StringBuilder((int)f.length());
		Scanner scanner = new Scanner(f);
		String lineSeparator = System.getProperty("line.separator");
		try {
			while(scanner.hasNextLine()){
				text.append(scanner.nextLine() + lineSeparator);
			}
			return text.toString();
		}
		finally{
			scanner.close();
		}
	}

	private void fillRightPanel(String gamepath) {
		// If the right panel already exists from another game, just delete all the components
		rightPanel.setVisible(false);
		rightPanel.removeAll();
		
		String textPath = ("src"+gamepath+"/text.txt");
		//String gifPath = ("src"+gamepath+"/gif.gif");
		//String settingsPath = ("src"+gamepath+"/?????");
		String execPath = ("src"+gamepath+"/start.exe");

			
		// get the text. 
		String gameInfo;
		try {
			gameInfo = readTextFile(textPath);
		}catch(IOException IOex) {
			System.out.println(IOex.getMessage());
			gameInfo = "no info found";
		}
						
		// create the box layout manager object
		Box box = Box.createVerticalBox();
		
		// text area
		JTextArea Jtext = new JTextArea(20,30);
		Jtext.setLineWrap(true);
		Jtext.setEditable(false);
		Jtext.setText(gameInfo);
		box.add(Jtext);
		
		//
	    box.add(Box.createVerticalStrut(25));

		// TO DO: SETTINGS
		
		// Button
	    JButton start;
	    try{
			start = makeStartButton(gamepath);
			box.add(start);
		}catch(IOException e) {
			System.out.println(e.getMessage());
		}
		
		
		
		
		rightPanel.add(box);
		rightPanel.setVisible(true);
	}
	
	private JButton makeStartButton(String gamepath) throws IOException {
		JButton button = new JButton("START");
		String temp = getClass().getResource(gamepath+"/game.jar").getPath();
		String path = temp.substring(1, temp.length());
		ActionListener listener = new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				ProcessBuilder pb = new ProcessBuilder("java", "-jar", path, "3", "false");
				try {
					Process p = pb.start();
				}catch(IOException IOEx) {
					System.out.println(IOEx.getMessage());
				}
			}
		};
		button.addActionListener(listener);
		button.setHorizontalAlignment(JButton.CENTER);
		return button;
	}

	
/*	
	public void setBackgroundColor(Color color, JFrame frame) {
		backgroundColor = color;
		Container c = frame.getContentPane();
		c.setBackground(color);
	}
	
	public Color getBackgroundColor() {
		return backgroundColor;
	}
*/

	
	public static void main(String[] args){
		SwingUtilities.invokeLater(new Runnable() { 
		      public void run() { 
		        new Gamehub();
		      }
		 });
	}
}

